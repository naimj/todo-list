const filterTrads = (items, q, codeLower) => {
  // Pas de recrÃ©ation de fonction inutile
  return items.filter(({ TRADUCTION }) => {
    const t = TRADUCTION?.toLowerCase() || ''
    return t.includes(q) || codeLower.includes(q)
  })
}

const searchResult = (query) => {
  const q = query.trim().toLowerCase()
  if (!q) return groupedData.value

  const result = {}

  for (const [domaine, codes] of Object.entries(groupedData.value)) {
    for (const [codeTrad, items] of Object.entries(codes)) {
      const filteredItems = filterTrads(items, q, codeTrad.toLowerCase())
      if (filteredItems.length) {
        result[domaine] ??= {}
        result[domaine][codeTrad] = filteredItems
      }
    }
  }

  return result
}

const onSearchQuery = useDebounceFn(() => {
  const q = searchTrad.value.trim()

  // 1. filtrage
  filteredData.value = searchResult(q)

  if (q) {
    // ðŸ‘‰ N'ouvre qu'un seul domaine et un seul code â†’ DOM minimal
    const firstDomain = Object.keys(filteredData.value)[0]
    if (firstDomain) {
      openedDomains.value = [firstDomain]

      const firstCode = Object.keys(filteredData.value[firstDomain])[0]
      openedCodes.value = { [firstDomain]: firstCode ? [firstCode] : [] }
    } else {
      openedDomains.value = []
      openedCodes.value = {}
    }
  } else {
    openedDomains.value = []
    openedCodes.value = {}
  }
}, 250) // petit debounce
