<template>
  <v-list density="comfortable" nav>
    <template v-for="parent in items" :key="parent.id">
      <v-list-group :value="parent.id" no-action>
        <template #activator="{ props }">
          <v-list-item v-bind="props">
            <v-icon class="me-2" color="primary">
              {{ selected.includes(parent.id) ? 'mdi-folder' : 'mdi-folder-outline' }}
            </v-icon>

            <v-checkbox
              :model-value="selected.includes(parent.id)"
              @update:model-value="toggleParent(parent)"
              density="compact"
              hide-details
              color="primary"
            />
            <v-list-item-title>{{ parent.name }}</v-list-item-title>
          </v-list-item>
        </template>

        <v-list-item
          v-for="child in parent.children"
          :key="child.id"
          :disabled="selected.includes(parent.id)"
        >
          <v-icon class="me-2" color="grey">mdi-file-outline</v-icon>
          <v-list-item-title :class="{ 'text-disabled': selected.includes(parent.id) }">
            {{ child.name }}
          </v-list-item-title>
        </v-list-item>
      </v-list-group>
    </template>
  </v-list>

  <div class="mt-4">
    <strong>v-model:selected :</strong> {{ selected }}
  </div>
</template>

<script setup>
import { ref } from 'vue'

const items = [
  {
    id: 1,
    name: 'Dossier A',
    children: [
      { id: 2, name: 'Fichier A1' },
      { id: 3, name: 'Fichier A2' },
    ],
  },
  {
    id: 4,
    name: 'Dossier B',
    children: [
      { id: 5, name: 'Fichier B1' },
    ],
  },
]

const selected = ref([])

const toggleParent = parent => {
  if (selected.value.includes(parent.id)) {
    selected.value = selected.value.filter(v => v !== parent.id)
  } else {
    selected.value.push(parent.id)
  }
}
</script>
